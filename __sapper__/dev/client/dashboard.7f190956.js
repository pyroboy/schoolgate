import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, K as handle_promise, L as validate_store, M as component_subscribe, e as element, a as space, C as empty, c as claim_element, b as children, g as detach_dev, h as claim_space, l as add_location, m as insert_dev, n as noop, t as text, f as claim_text, o as append_dev, B as set_data_dev, N as update_keyed_each, O as destroy_block, P as destroy_each, q as create_component, r as claim_component, u as mount_component, x as transition_in, y as transition_out, z as destroy_component } from './index.892efb91.js';
import './index.482e8653.js';
import { c as gql } from './bundle.esm.9a99eb82.js';
import { g as getClient, q as query, s as subscribe, a as setClient, c as client } from './_apollo.c3e2f82f.js';
import './_commonjsHelpers.e0f9ccb2.js';

/* src/components/Test.svelte generated by Svelte v3.16.0 */
const file = "src/components/Test.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (38:2) {:catch error}
function create_catch_block_1(ctx) {
	let li;
	let t_value = /*error*/ ctx[11] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 38, 4, 742);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$new_scans*/ 1 && t_value !== (t_value = /*error*/ ctx[11] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block_1.name,
		type: "catch",
		source: "(38:2) {:catch error}",
		ctx
	});

	return block;
}

// (32:2) {:then result}
function create_then_block_1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let each_value_1 = /*result*/ ctx[10].data.scanned;
	const get_key = ctx => /*scanned*/ ctx[12].id;

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
	}

	let each_1_else = null;

	if (!each_value_1.length) {
		each_1_else = create_else_block(ctx);
		each_1_else.c();
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);

			if (each_1_else) {
				each_1_else.m(target, anchor);
			}
		},
		p: function update(ctx, dirty) {
			const each_value_1 = /*result*/ ctx[10].data.scanned;
			each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, each_1_anchor.parentNode, destroy_block, create_each_block_1, each_1_anchor, get_each_context_1);

			if (each_value_1.length) {
				if (each_1_else) {
					each_1_else.d(1);
					each_1_else = null;
				}
			} else if (!each_1_else) {
				each_1_else = create_else_block(ctx);
				each_1_else.c();
				each_1_else.m(each_1_anchor.parentNode, each_1_anchor);
			}
		},
		d: function destroy(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach_dev(each_1_anchor);
			if (each_1_else) each_1_else.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block_1.name,
		type: "then",
		source: "(32:2) {:then result}",
		ctx
	});

	return block;
}

// (35:4) {:else}
function create_else_block(ctx) {
	let li;
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text("No authors found");
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t = claim_text(li_nodes, "No authors found");
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 35, 6, 683);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(35:4) {:else}",
		ctx
	});

	return block;
}

// (33:4) {#each result.data.scanned as scanned (scanned.id)}
function create_each_block_1(key_1, ctx) {
	let li;
	let t_value = /*scanned*/ ctx[12].scan + "";
	let t;

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 33, 6, 641);
			this.first = li;
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$new_scans*/ 1 && t_value !== (t_value = /*scanned*/ ctx[12].scan + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(33:4) {#each result.data.scanned as scanned (scanned.id)}",
		ctx
	});

	return block;
}

// (30:21)      <li>Loading...</li>   {:then result}
function create_pending_block_1(ctx) {
	let li;
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text("Loading...");
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t = claim_text(li_nodes, "Loading...");
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 30, 4, 542);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block_1.name,
		type: "pending",
		source: "(30:21)      <li>Loading...</li>   {:then result}",
		ctx
	});

	return block;
}

// (52:0) {:catch error}
function create_catch_block(ctx) {
	let t0;
	let t1_value = /*error*/ ctx[11] + "";
	let t1;

	const block = {
		c: function create() {
			t0 = text("Error: ");
			t1 = text(t1_value);
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "Error: ");
			t1 = claim_text(nodes, t1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$scans*/ 2 && t1_value !== (t1_value = /*error*/ ctx[11] + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(52:0) {:catch error}",
		ctx
	});

	return block;
}

// (47:0) {:then result}
function create_then_block(ctx) {
	let each_1_anchor;
	let each_value = /*result*/ ctx[10].data.scanned;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$scans*/ 2) {
				each_value = /*result*/ ctx[10].data.scanned;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(47:0) {:then result}",
		ctx
	});

	return block;
}

// (48:2) {#each result.data.scanned as scan}
function create_each_block(ctx) {
	let t0_value = /*scan*/ ctx[7].scan + "";
	let t0;
	let t1;
	let br;

	const block = {
		c: function create() {
			t0 = text(t0_value);
			t1 = space();
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, t0_value);
			t1 = claim_space(nodes);
			br = claim_element(nodes, "BR", {});
			this.h();
		},
		h: function hydrate() {
			add_location(br, file, 49, 4, 881);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, br, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$scans*/ 2 && t0_value !== (t0_value = /*scan*/ ctx[7].scan + "")) set_data_dev(t0, t0_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(48:2) {#each result.data.scanned as scan}",
		ctx
	});

	return block;
}

// (45:15)    Loading... {:then result}
function create_pending_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Loading...");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Loading...");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(45:15)    Loading... {:then result}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let ul;
	let promise;
	let t;
	let await_block1_anchor;
	let promise_1;

	let info = {
		ctx,
		current: null,
		token: null,
		pending: create_pending_block_1,
		then: create_then_block_1,
		catch: create_catch_block_1,
		value: 10,
		error: 11
	};

	handle_promise(promise = /*$new_scans*/ ctx[0], info);

	let info_1 = {
		ctx,
		current: null,
		token: null,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 10,
		error: 11
	};

	handle_promise(promise_1 = /*$scans*/ ctx[1], info_1);

	const block = {
		c: function create() {
			ul = element("ul");
			info.block.c();
			t = space();
			await_block1_anchor = empty();
			info_1.block.c();
			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);
			info.block.l(ul_nodes);
			ul_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			await_block1_anchor = empty();
			info_1.block.l(nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(ul, file, 28, 0, 511);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);
			info.block.m(ul, info.anchor = null);
			info.mount = () => ul;
			info.anchor = null;
			insert_dev(target, t, anchor);
			insert_dev(target, await_block1_anchor, anchor);
			info_1.block.m(target, info_1.anchor = anchor);
			info_1.mount = () => await_block1_anchor.parentNode;
			info_1.anchor = await_block1_anchor;
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*$new_scans*/ 1 && promise !== (promise = /*$new_scans*/ ctx[0]) && handle_promise(promise, info)) ; else {
				const child_ctx = ctx.slice();
				child_ctx[10] = info.resolved;
				info.block.p(child_ctx, dirty);
			}

			info_1.ctx = ctx;

			if (dirty & /*$scans*/ 2 && promise_1 !== (promise_1 = /*$scans*/ ctx[1]) && handle_promise(promise_1, info_1)) ; else {
				const child_ctx = ctx.slice();
				child_ctx[10] = info_1.resolved;
				info_1.block.p(child_ctx, dirty);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			info.block.d();
			info.token = null;
			info = null;
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(await_block1_anchor);
			info_1.block.d(detaching);
			info_1.token = null;
			info_1 = null;
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $new_scans;
	let $scans;
	const client = getClient();

	const SCANS = gql`
    {
      scanned(order_by: { created_at: desc }) {
        scan
      }
    }
  `;

	const NEW_SCANS = gql`
  subscription {
  scanned(limit: 1, order_by: {created_at: desc}) {
    scan
  }
}
  `;

	let scans = query(client, { query: SCANS });
	validate_store(scans, "scans");
	component_subscribe($$self, scans, value => $$invalidate(1, $scans = value));
	let new_scans = subscribe(client, { query: NEW_SCANS });
	validate_store(new_scans, "new_scans");
	component_subscribe($$self, new_scans, value => $$invalidate(0, $new_scans = value));
	console.log(new_scans);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("scans" in $$props) scans = $$props.scans;
		if ("new_scans" in $$props) new_scans = $$props.new_scans;
		if ("$new_scans" in $$props) new_scans.set($new_scans = $$props.$new_scans);
		if ("$scans" in $$props) scans.set($scans = $$props.$scans);
	};

	return [$new_scans, $scans];
}

class Test extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Test",
			options,
			id: create_fragment.name
		});
	}
}

/* src/routes/dashboard.svelte generated by Svelte v3.16.0 */
const file$1 = "src/routes/dashboard.svelte";

function create_fragment$1(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let p;
	let t3;
	let t4;
	let current;
	const test = new Test({ $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("About this site");
			t2 = space();
			p = element("p");
			t3 = text("This is the 'about' page. There's not much here.");
			t4 = space();
			create_component(test.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "About this site");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, "This is the 'about' page. There's not much here.");
			p_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			claim_component(test.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Dashboard";
			add_location(h1, file$1, 11, 0, 228);
			add_location(p, file$1, 13, 0, 254);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t3);
			insert_dev(target, t4, anchor);
			mount_component(test, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(test.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(test.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t4);
			destroy_component(test, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self) {
	setClient(client);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		
	};

	return [];
}

class Dashboard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Dashboard",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Dashboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLjdmMTkwOTU2LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UZXN0LnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZGFzaGJvYXJkLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbjxzY3JpcHQ+XG4gIGltcG9ydCB7IGdldENsaWVudCwgcXVlcnkgLCBzdWJzY3JpYmUgfWZyb20gXCJzdmVsdGUtYXBvbGxvXCI7XG4gIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xuICBpbXBvcnQgeyBncWwgfSBmcm9tIFwiYXBvbGxvLWJvb3N0XCI7XG4gIGNvbnN0IFNDQU5TID0gZ3FsYFxuICAgIHtcbiAgICAgIHNjYW5uZWQob3JkZXJfYnk6IHsgY3JlYXRlZF9hdDogZGVzYyB9KSB7XG4gICAgICAgIHNjYW5cbiAgICAgIH1cbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgTkVXX1NDQU5TID0gZ3FsYFxuICBzdWJzY3JpcHRpb24ge1xuICBzY2FubmVkKGxpbWl0OiAxLCBvcmRlcl9ieToge2NyZWF0ZWRfYXQ6IGRlc2N9KSB7XG4gICAgc2NhblxuICB9XG59XG4gIGA7XG5cblxuICBsZXQgc2NhbnMgPSBxdWVyeShjbGllbnQsIHsgcXVlcnk6IFNDQU5TIH0pO1xuICBsZXQgbmV3X3NjYW5zID0gc3Vic2NyaWJlKGNsaWVudCwgeyBxdWVyeTogTkVXX1NDQU5TIH0pO1xuICBjb25zb2xlLmxvZyhuZXdfc2NhbnMpO1xuICBcbjwvc2NyaXB0PlxuXG48dWw+XG4gIHsjYXdhaXQgJG5ld19zY2Fuc31cbiAgICA8bGk+TG9hZGluZy4uLjwvbGk+XG4gIHs6dGhlbiByZXN1bHR9XG4gICAgeyNlYWNoIHJlc3VsdC5kYXRhLnNjYW5uZWQgYXMgc2Nhbm5lZCAoc2Nhbm5lZC5pZCl9XG4gICAgICA8bGk+e3NjYW5uZWQuc2Nhbn08L2xpPlxuICAgIHs6ZWxzZX1cbiAgICAgIDxsaT5ObyBhdXRob3JzIGZvdW5kPC9saT5cbiAgICB7L2VhY2h9XG4gIHs6Y2F0Y2ggZXJyb3J9XG4gICAgPGxpPntlcnJvcn08L2xpPlxuICB7L2F3YWl0fVxuPC91bD5cblxuXG5cbnsjYXdhaXQgJHNjYW5zfVxuICBMb2FkaW5nLi4uXG57OnRoZW4gcmVzdWx0fVxuICB7I2VhY2ggcmVzdWx0LmRhdGEuc2Nhbm5lZCBhcyBzY2FufVxuICAgIHtzY2FuLnNjYW59XG4gICAgPGJyIC8+XG4gIHsvZWFjaH1cbns6Y2F0Y2ggZXJyb3J9XG4gIEVycm9yOiB7ZXJyb3J9XG57L2F3YWl0fVxuIiwiPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+RGFzaGJvYXJkPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCB7IHNldENsaWVudCB9IGZyb20gJ3N2ZWx0ZS1hcG9sbG8nO1xuICBpbXBvcnQgeyBjbGllbnQgfSBmcm9tICcuL19hcG9sbG8nO1xuICBzZXRDbGllbnQoY2xpZW50KTtcbiAgaW1wb3J0IFRlc3QgZnJvbSAnLi4vY29tcG9uZW50cy9UZXN0LnN2ZWx0ZSc7XG5cbjwvc2NyaXB0PlxuPGgxPkFib3V0IHRoaXMgc2l0ZTwvaDE+XG5cbjxwPlRoaXMgaXMgdGhlICdhYm91dCcgcGFnZS4gVGhlcmUncyBub3QgbXVjaCBoZXJlLjwvcD5cblxuPFRlc3QgLz4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBZ0NXLEdBQU0sS0FBQyxJQUFJLENBQUMsT0FBTztvQ0FBYSxHQUFPLEtBQUMsRUFBRTs7a0NBQS9DLE1BQUk7Ozs7Ozs7O21CQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21DQUFDLEdBQU0sS0FBQyxJQUFJLENBQUMsT0FBTzs7O29CQUF4QixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJCQUNDLEdBQU8sS0FBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0VBQVosR0FBTyxLQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFjZCxHQUFNLEtBQUMsSUFBSSxDQUFDLE9BQU87OztnQ0FBeEIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0QkFBQyxHQUFNLEtBQUMsSUFBSSxDQUFDLE9BQU87OzsrQkFBeEIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7OztvQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQUNILEdBQUksSUFBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUVBQVQsR0FBSSxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5Q0FuQkosR0FBVTs7Ozs7Ozs7Ozs7Ozt1Q0FlWixHQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUVBZkosR0FBVTs7Ozs7Ozs7cUVBZVosR0FBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0ExQ04sTUFBTSxHQUFHLFNBQVM7O09BRWxCLEtBQUssR0FBRyxHQUFHOzs7Ozs7OztPQVFYLFNBQVMsR0FBRyxHQUFHOzs7Ozs7OztLQVNqQixLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLEVBQUUsS0FBSzs7O0tBQ3BDLFNBQVMsR0FBRyxTQUFTLENBQUMsTUFBTSxJQUFJLEtBQUssRUFBRSxTQUFTOzs7Q0FDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQ3BCckIsU0FBUyxDQUFDLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
