import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, K as handle_promise, L as validate_store, M as component_subscribe, a as space, e as element, t as text, h as claim_space, c as claim_element, b as children, f as claim_text, g as detach_dev, l as add_location, m as insert_dev, o as append_dev, n as noop, B as set_data_dev, C as empty, N as update_keyed_each, O as destroy_block } from './index.892efb91.js';
import './index.482e8653.js';
import { a as gql, s as subscribe, c as client } from './bundle.esm.1d10c5f9.js';
import './_commonjsHelpers.e0f9ccb2.js';

/* src/routes/sub.svelte generated by Svelte v3.16.0 */
const file = "src/routes/sub.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (33:2) {:catch error}
function create_catch_block(ctx) {
	let li;
	let t_value = /*error*/ ctx[7] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 33, 4, 660);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$new_scans*/ 1 && t_value !== (t_value = /*error*/ ctx[7] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(33:2) {:catch error}",
		ctx
	});

	return block;
}

// (27:2) {:then result}
function create_then_block(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let each_value = /*result*/ ctx[6].data.scanned;
	const get_key = ctx => /*scanned*/ ctx[3].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	let each_1_else = null;

	if (!each_value.length) {
		each_1_else = create_else_block(ctx);
		each_1_else.c();
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);

			if (each_1_else) {
				each_1_else.m(target, anchor);
			}
		},
		p: function update(ctx, dirty) {
			const each_value = /*result*/ ctx[6].data.scanned;
			each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, destroy_block, create_each_block, each_1_anchor, get_each_context);

			if (each_value.length) {
				if (each_1_else) {
					each_1_else.d(1);
					each_1_else = null;
				}
			} else if (!each_1_else) {
				each_1_else = create_else_block(ctx);
				each_1_else.c();
				each_1_else.m(each_1_anchor.parentNode, each_1_anchor);
			}
		},
		d: function destroy(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach_dev(each_1_anchor);
			if (each_1_else) each_1_else.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(27:2) {:then result}",
		ctx
	});

	return block;
}

// (30:4) {:else}
function create_else_block(ctx) {
	let li;
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text("No authors found");
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t = claim_text(li_nodes, "No authors found");
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 30, 6, 601);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(30:4) {:else}",
		ctx
	});

	return block;
}

// (28:4) {#each result.data.scanned as scanned (scanned.id)}
function create_each_block(key_1, ctx) {
	let li;
	let t_value = /*scanned*/ ctx[3].scan + "";
	let t;

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 28, 6, 559);
			this.first = li;
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$new_scans*/ 1 && t_value !== (t_value = /*scanned*/ ctx[3].scan + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(28:4) {#each result.data.scanned as scanned (scanned.id)}",
		ctx
	});

	return block;
}

// (25:21)      <li>Loading...</li>   {:then result}
function create_pending_block(ctx) {
	let li;
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text("Loading...");
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t = claim_text(li_nodes, "Loading...");
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 25, 4, 460);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(25:21)      <li>Loading...</li>   {:then result}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let ul;
	let promise;

	let info = {
		ctx,
		current: null,
		token: null,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 6,
		error: 7
	};

	handle_promise(promise = /*$new_scans*/ ctx[0], info);

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Subscription");
			t2 = space();
			ul = element("ul");
			info.block.c();
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Subscription");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);
			info.block.l(ul_nodes);
			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Subscription";
			add_location(h1, file, 22, 0, 407);
			add_location(ul, file, 23, 0, 429);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, ul, anchor);
			info.block.m(ul, info.anchor = null);
			info.mount = () => ul;
			info.anchor = null;
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*$new_scans*/ 1 && promise !== (promise = /*$new_scans*/ ctx[0]) && handle_promise(promise, info)) ; else {
				const child_ctx = ctx.slice();
				child_ctx[6] = info.resolved;
				info.block.p(child_ctx, dirty);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(ul);
			info.block.d();
			info.token = null;
			info = null;
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $new_scans;

	const NEW_SCANS = gql`
subscription {
  scanned(limit: 10, order_by: {created_at: desc}) {
    scan
  }
}
  `;

	let new_scans = subscribe(client, { query: NEW_SCANS });
	validate_store(new_scans, "new_scans");
	component_subscribe($$self, new_scans, value => $$invalidate(0, $new_scans = value));

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("new_scans" in $$props) new_scans = $$props.new_scans;
		if ("$new_scans" in $$props) new_scans.set($new_scans = $$props.$new_scans);
	};

	return [$new_scans];
}

class Sub extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Sub",
			options,
			id: create_fragment.name
		});
	}
}

export default Sub;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLmE4N2Q3NTk2LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL3N1Yi5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+U3Vic2NyaXB0aW9uPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxzY3JpcHQ+XG5cbiAgaW1wb3J0IHsgY2xpZW50IH0gZnJvbSAnLi9fYXBvbGxvJztcbiAgaW1wb3J0IHtzdWJzY3JpYmUgfWZyb20gXCJzdmVsdGUtYXBvbGxvXCI7XG4gIGltcG9ydCB7IGdxbCB9IGZyb20gXCJhcG9sbG8tYm9vc3RcIjtcbmltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xuXG4gIGNvbnN0IE5FV19TQ0FOUyA9IGdxbGBcbnN1YnNjcmlwdGlvbiB7XG4gIHNjYW5uZWQobGltaXQ6IDEwLCBvcmRlcl9ieToge2NyZWF0ZWRfYXQ6IGRlc2N9KSB7XG4gICAgc2NhblxuICB9XG59XG4gIGA7XG4gIGxldCBuZXdfc2NhbnMgPSBzdWJzY3JpYmUoY2xpZW50LCB7IHF1ZXJ5OiBORVdfU0NBTlMgfSk7XG5cblxuPC9zY3JpcHQ+XG48aDE+U3Vic2NyaXB0aW9uPC9oMT5cbjx1bD5cbiAgeyNhd2FpdCAkbmV3X3NjYW5zfVxuICAgIDxsaT5Mb2FkaW5nLi4uPC9saT5cbiAgezp0aGVuIHJlc3VsdH1cbiAgICB7I2VhY2ggcmVzdWx0LmRhdGEuc2Nhbm5lZCBhcyBzY2FubmVkIChzY2FubmVkLmlkKX1cbiAgICAgIDxsaT57c2Nhbm5lZC5zY2FufTwvbGk+XG4gICAgezplbHNlfVxuICAgICAgPGxpPk5vIGF1dGhvcnMgZm91bmQ8L2xpPlxuICAgIHsvZWFjaH1cbiAgezpjYXRjaCBlcnJvcn1cbiAgICA8bGk+e2Vycm9yfTwvbGk+XG4gIHsvYXdhaXR9XG48L3VsPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBMkJXLEdBQU0sSUFBQyxJQUFJLENBQUMsT0FBTztvQ0FBYSxHQUFPLElBQUMsRUFBRTs7Z0NBQS9DLE1BQUk7Ozs7Ozs7O2lCQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQUFDLEdBQU0sSUFBQyxJQUFJLENBQUMsT0FBTzs7O2tCQUF4QixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJCQUNDLEdBQU8sSUFBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0VBQVosR0FBTyxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUNBSmIsR0FBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUVBQVYsR0FBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BakJaLFNBQVMsR0FBRyxHQUFHOzs7Ozs7OztLQU9qQixTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sSUFBSSxLQUFLLEVBQUUsU0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
